# Stages of pipeline, should match with stage tag inside each job.
# Each stages executes in sequence, if previous job fails, then all the preceeding jobs are skipped.
stages:
  - gradlebuild
  - gradletest
  - autodeploy
  - androidbuild
  - androidtest
    
gradle-build:
  stage: gradlebuild
  before_script:
    - export GRADLE_USER_HOME=`pwd`/Backend/server/.gradle
    - chmod +x Backend/server/gradlew
  tags:
    - shell
  script:
    - cd Backend/server
    - ./gradlew assemble

gradle-test:
  stage: gradletest
  before_script:
    - export GRADLE_USER_HOME=`pwd`/Backend/server/.gradle
    - chmod +x Backend/server/gradlew
  tags:
    - shell
  script:
    - cd Backend/server
    - ./gradlew test

auto-deploy:
  stage: autodeploy
  before_script:
    - export GRADLE_USER_HOME=`pwd`/Backend/server/.gradle
    - chmod +x Backend/server/gradlew
  tags:
    - shell
  script:
    - cd Backend/server
    - ./gradlew build
    - sudo mv build/libs/*.jar /target/spring-demo.jar
    - sudo systemctl stop system-spring-demo
    - sudo systemctl start system-spring-demo
 
# To build android projects
# Notice that we cd into Android_test folder which contains all Android files before building apk.    
# Ensure the tag matches with the tag created for Android runner
# Android runner should have docker as executor.
android-build:
  image: javiersantos/android-ci:latest
  stage: androidbuild
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./AndroidStudioProjects/Loginscreen/gradlew
  tags:
   - android_tag
  script:
    - cd ./AndroidStudioProjects/Loginscreen
    - ./gradlew assemble
  artifacts:
    paths:
    - AndroidStudioProjects/Loginscreen/app/build/outputs/
    
# To run Android unit tests.   
unitTests:
  image: javiersantos/android-ci:latest
  stage: androidtest
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./Android_test/gradlew
  tags:
   - android_tag
  script:
    - cd Android_test
    - ./gradlew test
