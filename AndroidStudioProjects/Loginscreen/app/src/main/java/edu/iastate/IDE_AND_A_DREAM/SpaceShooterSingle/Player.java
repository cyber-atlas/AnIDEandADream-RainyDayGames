package edu.iastate.IDE_AND_A_DREAM.SpaceShooterSingle;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Rect;

import edu.iastate.loginscreen.R;


/**
 * @Author Alexander Stevenson
 * The type Player.
 */
public class Player {
    //Bitmap to get character from image
    private Bitmap bitmap;

   //the coordinates
    private int x;
    private int y;

    //speed of the character
    private int speed = 0;

    //Boolean variable to track whether the ship is boosting or not
    private boolean boosting;

    //Gravity Value to add gravity effect on the ship
    private final int GRAVITY = -10;

    //Control the Y coordinate so that the ship stays on screen
    private int minY;
    private int maxY;

    //limit the bounds of the ship speed
    private final int MIN_SPEED =1;
    private final int MAX_SPEED = 20;

    private Rect detectCollision;
    //constructor


    /**
     * The Shooting.
     */
    public boolean shooting;

    /**
     * Instantiates a new Player.
     *
     * @param context the context
     * @param screenX the screen x
     * @param screenY the screen y
     */
    public Player(Context context, int screenX, int screenY){
        x = 75;
        y = 50;
        speed = 1;

        //Get the bitmap from the drawable resource
        bitmap  = BitmapFactory.decodeResource(context.getResources(), R.drawable.playertest);

        //Calculate max y
        maxY = screenY - bitmap.getHeight();

        //top edge's y point is 0  so min y will always be 0
        minY = 0;

        //Set the boosting value to false when itialized
        boosting = false;

        //Initialize rect object
        detectCollision = new Rect(x, y, bitmap.getWidth(), bitmap.getHeight());

        shooting = false;
    }

    /**
     * Set boosting.
     */
//Setting boosting
    public void setBoosting(){
        boosting = true;
    }

    /**
     * Set shooting.
     *
     * @param bool the bool
     */
    public void setShooting(boolean bool){
        shooting = bool;
    }

    /**
     * Stop boosting.
     */
//Stop Boosting
    public void stopBoosting(){
        boosting = false;
    }

    /**
     * Update.
     */
    public void update() {

        //If the ship is boosting speed up by 2 else, slow down by 5
        speed = (boosting)? speed+2 : speed -5;

        //Bounds the top speed
        if (speed > MAX_SPEED){
            speed = MAX_SPEED;
        }
        //Bounds the min speed
        if (speed < MIN_SPEED){
            speed = MIN_SPEED;
        }

        //moves the ship down using the speed to counteract gravity
        y -= speed + GRAVITY;

        //make sure the ship does not go off of the screen
        if (y < minY){
            y =  minY;
        }
        if (y > maxY){
            y = maxY;
        }

        //update x
//        x++;

        //Adding top left bottom right to the rect object
        detectCollision.left = x;
        detectCollision.top = y;
        detectCollision.right = x + bitmap.getWidth();
        detectCollision.bottom = y + bitmap.getHeight();

    }

    /**
     * Get detect collision rect.
     *
     * @return the rect
     */
//gets rect objects
    public Rect getDetectCollision(){
        return detectCollision;
    }

    /**
     * Gets bitmap.
     *
     * @return the bitmap
     */
//auto generated Bitmap getter
    public Bitmap getBitmap() {
        return bitmap;
    }

    /**
     * Gets x.
     *
     * @return the x
     */
//Autgenerated getter
    public int getX() {
        return x;
    }

    /**
     * Gets y.
     *
     * @return the y
     */
//Autogenerated getter
    public int getY() {
        return y;
    }

    /**
     * Gets speed.
     *
     * @return the speed
     */
//autogenerated getter
    public int getSpeed() {
        return speed;
    }

    /**
     * Is shooting boolean.
     *
     * @return the boolean
     */
    public boolean isShooting() {
        return shooting;
    }
}
